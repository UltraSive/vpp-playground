// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTunnel returns the embedded CollectionSpec for tunnel.
func loadTunnel() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TunnelBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tunnel: %w", err)
	}

	return spec, err
}

// loadTunnelObjects loads tunnel and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tunnelObjects
//	*tunnelPrograms
//	*tunnelMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTunnelObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTunnel()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tunnelSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tunnelSpecs struct {
	tunnelProgramSpecs
	tunnelMapSpecs
	tunnelVariableSpecs
}

// tunnelProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tunnelProgramSpecs struct {
	XdpSockProg *ebpf.ProgramSpec `ebpf:"xdp_sock_prog"`
}

// tunnelMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tunnelMapSpecs struct {
	Ipv4ConnectionMap  *ebpf.MapSpec `ebpf:"ipv4_connection_map"`
	Ipv4DestinationMap *ebpf.MapSpec `ebpf:"ipv4_destination_map"`
	Ipv4PunchMap       *ebpf.MapSpec `ebpf:"ipv4_punch_map"`
	PktCount           *ebpf.MapSpec `ebpf:"pkt_count"`
	TunnelMap          *ebpf.MapSpec `ebpf:"tunnel_map"`
	XsksMap            *ebpf.MapSpec `ebpf:"xsks_map"`
}

// tunnelVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tunnelVariableSpecs struct {
}

// tunnelObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTunnelObjects or ebpf.CollectionSpec.LoadAndAssign.
type tunnelObjects struct {
	tunnelPrograms
	tunnelMaps
	tunnelVariables
}

func (o *tunnelObjects) Close() error {
	return _TunnelClose(
		&o.tunnelPrograms,
		&o.tunnelMaps,
	)
}

// tunnelMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTunnelObjects or ebpf.CollectionSpec.LoadAndAssign.
type tunnelMaps struct {
	Ipv4ConnectionMap  *ebpf.Map `ebpf:"ipv4_connection_map"`
	Ipv4DestinationMap *ebpf.Map `ebpf:"ipv4_destination_map"`
	Ipv4PunchMap       *ebpf.Map `ebpf:"ipv4_punch_map"`
	PktCount           *ebpf.Map `ebpf:"pkt_count"`
	TunnelMap          *ebpf.Map `ebpf:"tunnel_map"`
	XsksMap            *ebpf.Map `ebpf:"xsks_map"`
}

func (m *tunnelMaps) Close() error {
	return _TunnelClose(
		m.Ipv4ConnectionMap,
		m.Ipv4DestinationMap,
		m.Ipv4PunchMap,
		m.PktCount,
		m.TunnelMap,
		m.XsksMap,
	)
}

// tunnelVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTunnelObjects or ebpf.CollectionSpec.LoadAndAssign.
type tunnelVariables struct {
}

// tunnelPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTunnelObjects or ebpf.CollectionSpec.LoadAndAssign.
type tunnelPrograms struct {
	XdpSockProg *ebpf.Program `ebpf:"xdp_sock_prog"`
}

func (p *tunnelPrograms) Close() error {
	return _TunnelClose(
		p.XdpSockProg,
	)
}

func _TunnelClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tunnel_bpfeb.o
var _TunnelBytes []byte
